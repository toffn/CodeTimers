// Importing the serial library to communicate with the Arduino 
import processing.serial.*;    

// Initializing a vairable named 'myPort' for serial communication
Serial myPort;      
String [] data;

int switchValue = 0;
int potValue = 0;
int ldrValue=0;
int backgroundColor = 255;

// mapping pot values
float minPotValue = 0;
float maxPotValue = 4095;
//int minSpeed = 0;
//int maxSpeed = 50;

//timer for the background color
Timer displayTimer;
Timer secondTimer; 
float slideTime=0;
float minslideTime= 100;
float maxslideTime= 1000;
float defaultslideTime=2500;

// Change to appropriate index in the serial list â€” YOURS MIGHT BE DIFFERENT
int serialIndex = 7;

//Initialize images
PImage [] imageList; //hell
PImage [] imageList1; //people who are going to hell
PImage [] imageList2; //flames of hell
int imageListIndex = 0;
int imageListIndex1 = 0;
int imageListIndex2 = 0;

void setup  () {
  size (800,  500);    

  // List all the available serial ports
  printArray(Serial.list());
    
  // Set the com port and the baud rate according to the Arduino IDE
  //-- use your port name
  myPort  =  new Serial (this, "/dev/cu.SLAB_USBtoUART",  115200); 
  
  // Creating timers
  displayTimer = new Timer(1000);
  secondTimer = new Timer(800); 
  
  // Start the timer. Every 1/2 second, it will do something
  displayTimer.start();
  secondTimer.start(); 
  
  //Setting up all image lists and loading images
  imageList=new PImage[3];
  
  imageList[0] = loadImage("background1.jpg");
  imageList[1] = loadImage("background2.jpg");
  imageList[2] = loadImage("background3.jpg");
  
  imageList1=new PImage[3];
  
  imageList1[0] = loadImage("bezos.jpg");
  imageList1[1] = loadImage("musk.jpg");
  imageList1[2] = loadImage("biden.jpg");
  
  imageList2=new PImage[3];
  
  imageList2[0] = loadImage("flame.jpg");
  imageList2[1] = loadImage("flame1.jpg");
  imageList2[2] = loadImage("flame2.jpg");

  textAlign(CENTER);
  fill(255);
  textSize(20);

} 

// We call this to get the data 
void checkSerial() {
  while (myPort.available() > 0) {
    String inBuffer = myPort.readString();  
    
    print(inBuffer);
    
    // This removes the end-of-line from the string 
    inBuffer = (trim(inBuffer));
    
    // This function will make an array of TWO items, 1st item = switch value, 2nd item = potValue
    data = split(inBuffer, ',');
   
   // ERROR-CHECK HERE
   if( data.length >= 2 ) {
      switchValue = int(data[0]);           // first index = switch value 
      potValue = int(data[1]);               // second index = pot value
      ldrValue = int(data[2]);               // third index = LDR value
      
    // Change the timer
    slideTime= map(potValue, maxPotValue, minPotValue, minslideTime, maxslideTime);
    displayTimer.setTimer(int(slideTime));
   }
  }
} 


void draw(){
  checkSerial();
  background(0);
  checkTimer();  
}

//Flash and increment images when mouse is pressed, display at mouse coordinates
void mousePressed()
{
  if (imageListIndex1 == 2)
       {
         imageListIndex1=0;
       }
       else if (imageListIndex1 != 2)
        {
          imageListIndex1++;
        }
     image(imageList1[imageListIndex1], mouseX, mouseY);
}

void checkTimer() {
  
 // Check to see if timer is expired, do something and then restart
 // Potentiometer controls speed at which flames flash
  if (displayTimer.expired()){
    for (int i=0;i<3;i++)
      {
        if (imageListIndex2 == 2)
       {
         imageListIndex2=0;
       }
       else if (imageListIndex2 != 2)
        {
          imageListIndex2++;
        }
     image(imageList2[imageListIndex2], 0, 0);
      }
     displayTimer.start();
  }
  
  //Second timer flashes backgrounds and instruction text
  if (secondTimer.expired())
  {
  if (imageListIndex == 2)
       {
         imageListIndex=0;
       }
       else if (imageListIndex != 2)
        {
          imageListIndex++;
        }
     image(imageList[imageListIndex], 0, 0);
    text("Click mouse or trackpad for a surprise", width/2,height/2);
    secondTimer.start();   
  }
}
